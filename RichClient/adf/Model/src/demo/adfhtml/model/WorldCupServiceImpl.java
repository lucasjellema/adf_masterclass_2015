package demo.adfhtml.model;

import demo.adfhtml.model.common.WorldCupService;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.common.types.ViewCriteriaRow;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 15 23:09:07 CEST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class WorldCupServiceImpl extends ApplicationModuleImpl implements WorldCupService {

    ADFLogger _logger = ADFLogger.createADFLogger(this.getClass());

    /**
     * This is the default constructor (do not remove).
     */

    public WorldCupServiceImpl() {
    }

    public void addTagToMatch(String tag, oracle.jbo.domain.Number matchId) {
        _logger.warning("going to add tag " + tag + "  to match " + matchId);
        // find id for tag in getTagsView1()
        oracle.jbo.domain.Number tagId;
        ViewObjectImpl tagsVO = getTagsView1();
        //        ViewCriteria tagsVC = tags.getViewCriteria();
        //        ViewCriteriaRow tagVCR = (ViewCriteriaRow)tagsVC.first();
        //        tagsVC.set.setAttribute("JobId", "IT_PROG");
        //        empVO.applyViewCriteria(empVC);
        //        empVO.executeQuery();
        //
        tagsVO.setApplyViewCriteriaName("FindByTag");
        tagsVO.setNamedWhereClauseParam("b_tagValue", tag);
        tagsVO.executeQuery();

        if (tagsVO.getAllRowsInRange().length == 0) {
            // no tag entry was found and a new one should be created
            _logger.warning("tag is not found; go create new tag row");
            Row newTagRow = tagsVO.createRow();
            newTagRow.setAttribute("Tag1", tag);
            tagsVO.insertRow(newTagRow);
            tagId = (Number)newTagRow.getAttribute("Id");
            _logger.warning("tagid = " + tagId);
            System.out.println("new tag created, tag id " + tagId);

        } else {
            _logger.warning("tag is found");
            tagId = (Number)tagsVO.first().getAttribute("Id");
            _logger.warning("tagid = " + tagId);

        }
        
        // now create new row in
             ViewObjectImpl impl = getMatchTagsView1();
             Row newRow = impl.createRow();
             newRow.setAttribute("TagId", tagId);
             newRow.setAttribute("MatchId", matchId);
             impl.insertRow(newRow);

    }

    public void removeTagfromMatch(String tag,
                                   oracle.jbo.domain.Number matchId) {
        _logger.warning("going to remove tag " + tag + "  from match " + matchId);
        // find id for tag in getTagsView1()
        oracle.jbo.domain.Number tagId;
        ViewObjectImpl tagsVO = getTagsView1();

        tagsVO.setApplyViewCriteriaName("FindByTag");
        tagsVO.setNamedWhereClauseParam("b_tagValue", tag);
        tagsVO.executeQuery();

        if (tagsVO.getAllRowsInRange().length > 0) {
            // tag entry was found and a new one should be created
            _logger.warning("tag is found");
            tagId = (Number)tagsVO.first().getAttribute("Id");
            _logger.warning("tagid = " + tagId);

        } else {
            _logger.warning("tag is not found; tag removal cannot be be performed");
            return;

        }

        // now find row in
        ViewObjectImpl matchtagsVO = getMatchTagsView1();
        // find row for tagId and matchId
        matchtagsVO.setApplyViewCriteriaName("FindByMatchAndTag");
        matchtagsVO.setNamedWhereClauseParam("b_tagId", tagId);
        matchtagsVO.setNamedWhereClauseParam("b_matchId", matchId);
        matchtagsVO.executeQuery();

        // then remove row
        if (matchtagsVO.getAllRowsInRange().length > 0) {
            // tag entry was found and a new one should be created
            _logger.warning("match tag is found");
            matchtagsVO.first();
            matchtagsVO.removeCurrentRow();

        } else {
            _logger.warning("matchtag is not found; tag removal cannot be be performed");
            return;
        }

    }

    /**
     * Container's getter for FootballRegionsView1.
     * @return FootballRegionsView1
     */
    public ViewObjectImpl getFootballRegionsView1() {
        return (ViewObjectImpl)findViewObject("FootballRegionsView1");
    }

    /**
     * Container's getter for MatchResultsView1.
     * @return MatchResultsView1
     */
    public ViewObjectImpl getMatchResultsView1() {
        return (ViewObjectImpl)findViewObject("MatchResultsView1");
    }

    /**
     * Container's getter for MatchTagsView1.
     * @return MatchTagsView1
     */
    public ViewObjectImpl getMatchTagsView1() {
        return (ViewObjectImpl)findViewObject("MatchTagsView1");
    }

    /**
     * Container's getter for StadiumsView1.
     * @return StadiumsView1
     */
    public ViewObjectImpl getStadiumsView1() {
        return (ViewObjectImpl)findViewObject("StadiumsView1");
    }

    /**
     * Container's getter for TagsView1.
     * @return TagsView1
     */
    public ViewObjectImpl getTagsView1() {
        return (ViewObjectImpl)findViewObject("TagsView1");
    }

    /**
     * Container's getter for TeamsView1.
     * @return TeamsView1
     */
    public ViewObjectImpl getTeamsView1() {
        return (ViewObjectImpl)findViewObject("TeamsView1");
    }

    /**
     * Container's getter for RemainingMatches1.
     * @return RemainingMatches1
     */
    public ViewObjectImpl getRemainingMatches1() {
        return (ViewObjectImpl)findViewObject("RemainingMatches1");
    }

    /**
     * Container's getter for RemainingTagCloudViewObj1.
     * @return RemainingTagCloudViewObj1
     */
    public ViewObjectImpl getRemainingTagCloudViewObj1() {
        return (ViewObjectImpl)findViewObject("RemainingTagCloudViewObj1");
    }

    /**
     * Container's getter for GroupStandingView1.
     * @return GroupStandingView1
     */
    public ViewObjectImpl getGroupStandingView1() {
        return (ViewObjectImpl)findViewObject("GroupStandingView1");
    }

    /**
     * Container's getter for MatchResultsView2.
     * @return MatchResultsView2
     */
    public ViewObjectImpl getMatchResultsView2() {
        return (ViewObjectImpl)findViewObject("MatchResultsView2");
    }

    /**
     * Container's getter for GroupStandingView2.
     * @return GroupStandingView2
     */
    public ViewObjectImpl getGroupStandingView2() {
        return (ViewObjectImpl)findViewObject("GroupStandingView2");
    }

    /**
     * Container's getter for GroupStandingView3.
     * @return GroupStandingView3
     */
    public ViewObjectImpl getGroupStandingView3() {
        return (ViewObjectImpl)findViewObject("GroupStandingView3");
    }

    /**
     * Container's getter for MatchTagsView2.
     * @return MatchTagsView2
     */
    public ViewObjectImpl getMatchTagsView2() {
        return (ViewObjectImpl)findViewObject("MatchTagsView2");
    }

    /**
     * Container's getter for MatchTagCloudView1.
     * @return MatchTagCloudView1
     */
    public ViewObjectImpl getMatchTagCloudView1() {
        return (ViewObjectImpl)findViewObject("MatchTagCloudView1");
    }

    /**
     * Container's getter for UniqueTagsView1.
     * @return UniqueTagsView1
     */
    public ViewObjectImpl getUniqueTagsView1() {
        return (ViewObjectImpl)findViewObject("UniqueTagsView1");
    }

    /**
     * Container's getter for MatchResultGroupStandingViewLink.
     * @return MatchResultGroupStandingViewLink
     */
    public ViewLinkImpl getMatchResultGroupStandingViewLink() {
        return (ViewLinkImpl)findViewLink("MatchResultGroupStandingViewLink");
    }

    /**
     * Container's getter for MatchResultGroupStandingViewLink1.
     * @return MatchResultGroupStandingViewLink1
     */
    public ViewLinkImpl getMatchResultGroupStandingViewLink1() {
        return (ViewLinkImpl)findViewLink("MatchResultGroupStandingViewLink1");
    }

    /**
     * Container's getter for TagsViewLink1.
     * @return TagsViewLink1
     */
    public ViewLinkImpl getTagsViewLink1() {
        return (ViewLinkImpl)findViewLink("TagsViewLink1");
    }

    /**
     * Container's getter for MatchResultMatchTagCloudViewLink1.
     * @return MatchResultMatchTagCloudViewLink1
     */
    public ViewLinkImpl getMatchResultMatchTagCloudViewLink1() {
        return (ViewLinkImpl)findViewLink("MatchResultMatchTagCloudViewLink1");
    }
}
