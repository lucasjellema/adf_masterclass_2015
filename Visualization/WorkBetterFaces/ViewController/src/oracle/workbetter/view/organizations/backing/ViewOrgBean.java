//Copyright (c) 2014 Oracle and/or its affiliates. All rights reserved.
package oracle.workbetter.view.organizations.backing;

import java.util.Date;
import java.util.Map;

import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;
import oracle.adf.view.rich.component.rich.data.RichListView;
import oracle.adf.view.rich.component.rich.input.RichInputText;
import oracle.adf.view.rich.component.rich.nav.RichButton;
import oracle.adf.view.rich.context.AdfFacesContext;
import oracle.adf.view.rich.render.ClientEvent;

import oracle.jbo.uicli.binding.JUCtrlHierNodeBinding;

import oracle.workbetter.view.common.WorkbetterBaseBean;
import oracle.workbetter.view.organizations.OrganizationsFlowState;

import org.apache.myfaces.trinidad.render.ExtendedRenderKitService;
import org.apache.myfaces.trinidad.util.ComponentReference;
import org.apache.myfaces.trinidad.util.Service;


public class ViewOrgBean extends WorkbetterBaseBean {
    private static ADFLogger _logger = ADFLogger.createADFLogger(ViewOrgBean.class);
    private static final String INFOTILE_EVENT_PAYLOAD = "index";
    private static final String WBCLIENT_EVENT_PAYLOAD = "payload";
    private OrganizationsFlowState _ofState;
    private ComponentReference _actionProxyButtonRef;
    private static final long day = (long) (1000 * 60 * 60 * 24);

    public void setOfState(OrganizationsFlowState _ofState) {
        this._ofState = _ofState;
    }

    public OrganizationsFlowState getOfState() {
        return _ofState;
    }

    public void setSelectedTile(int selectedTile) {
        getOfState().setSelectedTile(selectedTile);
    }

    public int getSelectedTile() {
        return getOfState().getSelectedTile();
    }
    
    public void setActionProxyButton(RichButton actionProxyButton) {
        _actionProxyButtonRef = ComponentReference.newUIComponentReference(actionProxyButton);
    }

    public RichButton getActionProxyButton() {
        if (_actionProxyButtonRef!=null)
        {
          return (RichButton) _actionProxyButtonRef.getComponent();
        }
        return null; 
    }

    /**
     *Standard event callback handler for the infoTile re-usable component
     * @param clientEvent
     */
    public void infoTileSelectionHandler(ClientEvent clientEvent) {
        Map eventParams = clientEvent.getParameters();
        if (eventParams.containsKey(INFOTILE_EVENT_PAYLOAD)){
            //Numerical values from JS come accross as doubles 
            int selectedTile = Integer.parseInt((String)eventParams.get(INFOTILE_EVENT_PAYLOAD));
            _logger.info("Selected Infotile no: " + selectedTile);
            setSelectedTile (selectedTile);
            AdfFacesContext.getCurrentInstance().addPartialTarget(clientEvent.getComponent());
                
        }
    }

    /**
     * Handle the client callback generated by a click on the listItems
     * @param clientEvent
     */
  public void drillIntoPerson(ClientEvent clientEvent) {
        
    Integer drillEmpId = null;    
        
        
    // To save processing, the id we need has been passed to the client click event 
    // and then that value is passed back as the payload of this event 
    Map params = clientEvent.getParameters();
    if (params.containsKey(WBCLIENT_EVENT_PAYLOAD)){
        Double clientPayload = (Double)params.get(WBCLIENT_EVENT_PAYLOAD);
        drillEmpId = clientPayload.intValue();
    }
    else { 
        // Alternative approach using row currency instead if the payload
        // from the client. It is not required in this case, but has been 
        // left in an as illustration of how to do it if (for example) you were not comfortable
        // in revealing the key attribute to the client
    
        UIComponent component = clientEvent.getComponent();
    
        while (component != null && !(component instanceof RichListView))
        {
            component = component.getParent();
        }
    
        if(component != null)
        {
            // We have the currency set since the event happened on the item
            JUCtrlHierNodeBinding nodeBinding = (JUCtrlHierNodeBinding)((RichListView) component).getRowData();
            drillEmpId = (Integer)nodeBinding.getAttribute("empId");
        }
    }
    
    if (drillEmpId != null){
      // push the selected emp into the pageflow scope state holder
      getOfState().setDrillPersonId(drillEmpId);
      
      // Send JS down to the server to do navigation using an hidden button. 
      // We have to do a second roundtrip here because we're too late in the lifecycle to
      // simply queue an ActionEvent and have it picked up, hence this approach
      FacesContext context =  FacesContext.getCurrentInstance();
      String proxyButtonId = this.getActionProxyButton().getClientId(context);
      ExtendedRenderKitService erks =
                  Service.getRenderKitService(context,
                          ExtendedRenderKitService.class);
      erks.addScript(context, "WBClient.clientButtonQueueAction('"+proxyButtonId+"');");
    }
  }

    public Date getTimelineStart() {
        return new Date(new Date().getTime() - (7 * day));
    }

    public Date getTimelineEnd() {
        return new Date(getTimelineStart().getTime() + (45 * day));
    }

}
