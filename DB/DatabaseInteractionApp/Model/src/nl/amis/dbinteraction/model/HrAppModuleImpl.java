package nl.amis.dbinteraction.model;

import java.sql.Clob;
import java.sql.Connection;

import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static java.util.regex.Pattern.CASE_INSENSITIVE;
import static java.util.regex.Pattern.COMMENTS;
import static java.util.regex.Pattern.DOTALL;

import nl.amis.dbinteraction.DatabaseProcedure;

import nl.amis.dbinteraction.model.common.HrAppModule;

import nl.amis.dbinteraction.model.common.Person;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.CSMessageBundle;
import oracle.jbo.SQLStmtException;
import oracle.jbo.domain.Array;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import static oracle.jbo.server.DBTransaction.DEFAULT;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleCallableStatement;

import oracle.sql.ArrayDescriptor;
import oracle.sql.CLOB;
import oracle.sql.Datum;
import oracle.sql.ORAData;
import oracle.sql.ORADataFactory;

import sun.awt.CausedFocusEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jan 28 10:48:44 CET 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HrAppModuleImpl extends ApplicationModuleImpl implements HrAppModule {

    // Prepare a static DatabaseProcedure object as follows. This object can be reused
    // multiple times.
    private static final DatabaseProcedure RIGHT_NOW_FUNC =
        DatabaseProcedure.define("function right_now" + " return date");

    static {
        // We have to register the PEOPLE_TBL_T type as an Array Type (PL/SQL
        // "table of ..." types become Arrays in Java). Because we have registered
        // the type, we can use it in any DatabaseProcedure definition from now on.
        // Note that this is case-sensitive and should match the case that is used
        // in the database (upper-case by default).
        DatabaseProcedure.registerArrayType("PEOPLE_TBL_T");
    }

    // The same as before. We simply copy the signature of the procedure. Note
    // that we use the custom type "PEOPLE_TBL_T" here.
    private static final DatabaseProcedure GET_THE_PEOPLE =
        DatabaseProcedure.define("function get_the_people return people_tbl_t");

    //

    /**
     * This is the default constructor (do not remove).
     */
    public HrAppModuleImpl() {
    }

    /**
     * Container's getter for DepartmentsView1.
     * @return DepartmentsView1
     */
    public ViewObjectImpl getDepartmentsView1() {
        return (ViewObjectImpl) findViewObject("DepartmentsView1");
    }

    /**
     * Container's getter for EmployeesView1.
     * @return EmployeesView1
     */
    public EmployeesViewImpl getEmployeesView1() {
        return (EmployeesViewImpl) findViewObject("EmployeesView1");
    }

    /**
     * Container's getter for EmployeesView2.
     * @return EmployeesView2
     */
    public EmployeesViewImpl getEmployeesView2() {
        return (EmployeesViewImpl) findViewObject("EmployeesView2");
    }

    /**
     * Container's getter for EmployeesView3.
     * @return EmployeesView3
     */
    public EmployeesViewImpl getEmployeesView3() {
        return (EmployeesViewImpl) findViewObject("EmployeesView3");
    }

    /**
     * Container's getter for DepartmentsView2.
     * @return DepartmentsView2
     */
    public ViewObjectImpl getDepartmentsView2() {
        return (ViewObjectImpl) findViewObject("DepartmentsView2");
    }

    /**
     * Container's getter for EmpManagerFkLink1.
     * @return EmpManagerFkLink1
     */
    public ViewLinkImpl getEmpManagerFkLink1() {
        return (ViewLinkImpl) findViewLink("EmpManagerFkLink1");
    }

    /**
     * Container's getter for EmpDeptFkLink1.
     * @return EmpDeptFkLink1
     */
    public ViewLinkImpl getEmpDeptFkLink1() {
        return (ViewLinkImpl) findViewLink("EmpDeptFkLink1");
    }

    /**
     * Container's getter for DeptMgrFkLink1.
     * @return DeptMgrFkLink1
     */
    public ViewLinkImpl getDeptMgrFkLink1() {
        return (ViewLinkImpl) findViewLink("DeptMgrFkLink1");
    }

    public Date rightNow() {
        // You either need a java.sql.Connection
        // or a oracle.jbo.server.DBTransaction. Note that
        // you can get a DBTransaction object by calling
        // getDBTransaction() from the ApplicationModuleImpl.

        // A DatabaseProcedure object has a call method. This method accepts a Connection or
        // DBTransaction as first parameter, the following parameters are the parameters to the
        // database procedure / function (varargs, positionally).
        Date result = (Date) RIGHT_NOW_FUNC.call(getDBTransaction()).getReturnValue();
        System.out.println(result);
        // result == "Hello Paco"
        return result;
    }


    public List<String> getThePeopleNames() {
        List<String> people = new ArrayList<String>();

        DatabaseProcedure.Result result = GET_THE_PEOPLE.call(getDBTransaction());

        Array thePeople = (Array) result.getOracleReturnValue();
        

        for (Object elem : thePeople.getArray()) {
            Person person = createPerson((Datum) elem);

            System.out.println(person.getFirstName() + ": " + person.getLastName());
            people.add(person.getFirstName() + ": " + person.getLastName());
        }
        System.out.println("The People " + thePeople);
        return people;
    }

    public String[] getPeopleNames() {
        List<String> people = new ArrayList<String>();

        DatabaseProcedure.Result result = GET_THE_PEOPLE.call(getDBTransaction());

        Array thePeople = (Array) result.getOracleReturnValue();
        

        for (Object elem : thePeople.getArray()) {
            Person person = createPerson((Datum) elem);

            System.out.println(person.getFirstName() + ": " + person.getLastName());
            people.add(person.getFirstName() + ": " + person.getLastName());
        }
        System.out.println("The People " + thePeople);
        return people.toArray(new String[0]);
    }


    public List<Person> getThePeople() {
        List<Person> people = new ArrayList<Person>();
        DatabaseProcedure.Result result = GET_THE_PEOPLE.call(getDBTransaction());
        Array thePeople = (Array) result.getOracleReturnValue();
        for (Object elem : thePeople.getArray()) {
            Person person = createPerson((Datum) elem);
            System.out.println(person.getFirstName() + ": " + person.getLastName());
            people.add(person);
        }
        return people;
    }

    private Person createPerson(Datum datum) {
        try {
            return new Person(datum);
        } catch (SQLException sqle) {
            throw new RuntimeException(sqle);
        }
    }

    /**
     * Container's getter for VEmployeesView1.
     * @return VEmployeesView1
     */
    public VEmployeesViewImpl getVEmployeesView1() {
        return (VEmployeesViewImpl) findViewObject("VEmployeesView1");
    }
}

